// Code generated by MockGen. DO NOT EDIT.
// Source: task_gen.go
//
// Generated by this command:
//
//	mockgen -source task_gen.go -destination mock/mock_task_gen/mock_task_gen.go
//

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	model "github.com/fujiwara-manabu-0516/volcago/generator/testfiles/not_auto"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(ctx context.Context, subject *model.Task, opts ...model.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(ctx, subject any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), varargs...)
}

// DeleteByIdentity mocks base method.
func (m *MockTaskRepository) DeleteByIdentity(ctx context.Context, identity string, opts ...model.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identity}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByIdentity", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIdentity indicates an expected call of DeleteByIdentity.
func (mr *MockTaskRepositoryMockRecorder) DeleteByIdentity(ctx, identity any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identity}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIdentity", reflect.TypeOf((*MockTaskRepository)(nil).DeleteByIdentity), varargs...)
}

// DeleteByIdentityWithTx mocks base method.
func (m *MockTaskRepository) DeleteByIdentityWithTx(ctx context.Context, tx *firestore.Transaction, identity string, opts ...model.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, identity}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByIdentityWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIdentityWithTx indicates an expected call of DeleteByIdentityWithTx.
func (mr *MockTaskRepositoryMockRecorder) DeleteByIdentityWithTx(ctx, tx, identity any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, identity}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIdentityWithTx", reflect.TypeOf((*MockTaskRepository)(nil).DeleteByIdentityWithTx), varargs...)
}

// DeleteMulti mocks base method.
func (m *MockTaskRepository) DeleteMulti(ctx context.Context, subjects []*model.Task, opts ...model.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subjects}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMulti", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMulti indicates an expected call of DeleteMulti.
func (mr *MockTaskRepositoryMockRecorder) DeleteMulti(ctx, subjects any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subjects}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulti", reflect.TypeOf((*MockTaskRepository)(nil).DeleteMulti), varargs...)
}

// DeleteMultiByIdentities mocks base method.
func (m *MockTaskRepository) DeleteMultiByIdentities(ctx context.Context, identities []string, opts ...model.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identities}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiByIdentities", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiByIdentities indicates an expected call of DeleteMultiByIdentities.
func (mr *MockTaskRepositoryMockRecorder) DeleteMultiByIdentities(ctx, identities any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identities}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiByIdentities", reflect.TypeOf((*MockTaskRepository)(nil).DeleteMultiByIdentities), varargs...)
}

// DeleteMultiByIdentitiesWithTx mocks base method.
func (m *MockTaskRepository) DeleteMultiByIdentitiesWithTx(ctx context.Context, tx *firestore.Transaction, identities []string, opts ...model.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, identities}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiByIdentitiesWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiByIdentitiesWithTx indicates an expected call of DeleteMultiByIdentitiesWithTx.
func (mr *MockTaskRepositoryMockRecorder) DeleteMultiByIdentitiesWithTx(ctx, tx, identities any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, identities}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiByIdentitiesWithTx", reflect.TypeOf((*MockTaskRepository)(nil).DeleteMultiByIdentitiesWithTx), varargs...)
}

// DeleteMultiWithTx mocks base method.
func (m *MockTaskRepository) DeleteMultiWithTx(ctx context.Context, tx *firestore.Transaction, subjects []*model.Task, opts ...model.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, subjects}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMultiWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultiWithTx indicates an expected call of DeleteMultiWithTx.
func (mr *MockTaskRepositoryMockRecorder) DeleteMultiWithTx(ctx, tx, subjects any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, subjects}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultiWithTx", reflect.TypeOf((*MockTaskRepository)(nil).DeleteMultiWithTx), varargs...)
}

// DeleteWithTx mocks base method.
func (m *MockTaskRepository) DeleteWithTx(ctx context.Context, tx *firestore.Transaction, subject *model.Task, opts ...model.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, subject}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWithTx indicates an expected call of DeleteWithTx.
func (mr *MockTaskRepositoryMockRecorder) DeleteWithTx(ctx, tx, subject any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, subject}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithTx", reflect.TypeOf((*MockTaskRepository)(nil).DeleteWithTx), varargs...)
}

// Get mocks base method.
func (m *MockTaskRepository) Get(ctx context.Context, identity string, opts ...model.GetOption) (*model.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identity}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskRepositoryMockRecorder) Get(ctx, identity any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identity}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskRepository)(nil).Get), varargs...)
}

// GetByDesc mocks base method.
func (m *MockTaskRepository) GetByDesc(ctx context.Context, description string) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDesc", ctx, description)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDesc indicates an expected call of GetByDesc.
func (mr *MockTaskRepositoryMockRecorder) GetByDesc(ctx, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDesc", reflect.TypeOf((*MockTaskRepository)(nil).GetByDesc), ctx, description)
}

// GetByDescWithTx mocks base method.
func (m *MockTaskRepository) GetByDescWithTx(tx *firestore.Transaction, description string) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDescWithTx", tx, description)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDescWithTx indicates an expected call of GetByDescWithTx.
func (mr *MockTaskRepositoryMockRecorder) GetByDescWithTx(tx, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDescWithTx", reflect.TypeOf((*MockTaskRepository)(nil).GetByDescWithTx), tx, description)
}

// GetCollection mocks base method.
func (m *MockTaskRepository) GetCollection() *firestore.CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection")
	ret0, _ := ret[0].(*firestore.CollectionRef)
	return ret0
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockTaskRepositoryMockRecorder) GetCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockTaskRepository)(nil).GetCollection))
}

// GetCollectionName mocks base method.
func (m *MockTaskRepository) GetCollectionName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCollectionName indicates an expected call of GetCollectionName.
func (mr *MockTaskRepositoryMockRecorder) GetCollectionName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionName", reflect.TypeOf((*MockTaskRepository)(nil).GetCollectionName))
}

// GetDocRef mocks base method.
func (m *MockTaskRepository) GetDocRef(identity string) *firestore.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocRef", identity)
	ret0, _ := ret[0].(*firestore.DocumentRef)
	return ret0
}

// GetDocRef indicates an expected call of GetDocRef.
func (mr *MockTaskRepositoryMockRecorder) GetDocRef(identity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocRef", reflect.TypeOf((*MockTaskRepository)(nil).GetDocRef), identity)
}

// GetMulti mocks base method.
func (m *MockTaskRepository) GetMulti(ctx context.Context, identities []string, opts ...model.GetOption) ([]*model.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identities}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMulti", varargs...)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockTaskRepositoryMockRecorder) GetMulti(ctx, identities any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identities}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockTaskRepository)(nil).GetMulti), varargs...)
}

// GetMultiWithTx mocks base method.
func (m *MockTaskRepository) GetMultiWithTx(tx *firestore.Transaction, identities []string, opts ...model.GetOption) ([]*model.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{tx, identities}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMultiWithTx", varargs...)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiWithTx indicates an expected call of GetMultiWithTx.
func (mr *MockTaskRepositoryMockRecorder) GetMultiWithTx(tx, identities any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tx, identities}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiWithTx", reflect.TypeOf((*MockTaskRepository)(nil).GetMultiWithTx), varargs...)
}

// GetWithDoc mocks base method.
func (m *MockTaskRepository) GetWithDoc(ctx context.Context, doc *firestore.DocumentRef, opts ...model.GetOption) (*model.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, doc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithDoc", varargs...)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithDoc indicates an expected call of GetWithDoc.
func (mr *MockTaskRepositoryMockRecorder) GetWithDoc(ctx, doc any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, doc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDoc", reflect.TypeOf((*MockTaskRepository)(nil).GetWithDoc), varargs...)
}

// GetWithDocWithTx mocks base method.
func (m *MockTaskRepository) GetWithDocWithTx(tx *firestore.Transaction, doc *firestore.DocumentRef, opts ...model.GetOption) (*model.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{tx, doc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithDocWithTx", varargs...)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithDocWithTx indicates an expected call of GetWithDocWithTx.
func (mr *MockTaskRepositoryMockRecorder) GetWithDocWithTx(tx, doc any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tx, doc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithDocWithTx", reflect.TypeOf((*MockTaskRepository)(nil).GetWithDocWithTx), varargs...)
}

// GetWithTx mocks base method.
func (m *MockTaskRepository) GetWithTx(tx *firestore.Transaction, identity string, opts ...model.GetOption) (*model.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{tx, identity}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithTx", varargs...)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithTx indicates an expected call of GetWithTx.
func (mr *MockTaskRepositoryMockRecorder) GetWithTx(tx, identity any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tx, identity}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTx", reflect.TypeOf((*MockTaskRepository)(nil).GetWithTx), varargs...)
}

// Insert mocks base method.
func (m *MockTaskRepository) Insert(ctx context.Context, subject *model.Task) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTaskRepositoryMockRecorder) Insert(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTaskRepository)(nil).Insert), ctx, subject)
}

// InsertMulti mocks base method.
func (m *MockTaskRepository) InsertMulti(ctx context.Context, subjects []*model.Task) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMulti", ctx, subjects)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMulti indicates an expected call of InsertMulti.
func (mr *MockTaskRepositoryMockRecorder) InsertMulti(ctx, subjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMulti", reflect.TypeOf((*MockTaskRepository)(nil).InsertMulti), ctx, subjects)
}

// InsertMultiWithTx mocks base method.
func (m *MockTaskRepository) InsertMultiWithTx(ctx context.Context, tx *firestore.Transaction, subjects []*model.Task) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMultiWithTx", ctx, tx, subjects)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMultiWithTx indicates an expected call of InsertMultiWithTx.
func (mr *MockTaskRepositoryMockRecorder) InsertMultiWithTx(ctx, tx, subjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMultiWithTx", reflect.TypeOf((*MockTaskRepository)(nil).InsertMultiWithTx), ctx, tx, subjects)
}

// InsertWithTx mocks base method.
func (m *MockTaskRepository) InsertWithTx(ctx context.Context, tx *firestore.Transaction, subject *model.Task) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWithTx", ctx, tx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWithTx indicates an expected call of InsertWithTx.
func (mr *MockTaskRepositoryMockRecorder) InsertWithTx(ctx, tx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithTx", reflect.TypeOf((*MockTaskRepository)(nil).InsertWithTx), ctx, tx, subject)
}

// RunInTransaction mocks base method.
func (m *MockTaskRepository) RunInTransaction() func(context.Context, func(context.Context, *firestore.Transaction) error, ...firestore.TransactionOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTransaction")
	ret0, _ := ret[0].(func(context.Context, func(context.Context, *firestore.Transaction) error, ...firestore.TransactionOption) error)
	return ret0
}

// RunInTransaction indicates an expected call of RunInTransaction.
func (mr *MockTaskRepositoryMockRecorder) RunInTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransaction", reflect.TypeOf((*MockTaskRepository)(nil).RunInTransaction))
}

// Search mocks base method.
func (m *MockTaskRepository) Search(ctx context.Context, param *model.TaskSearchParam, q *firestore.Query) ([]*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, param, q)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockTaskRepositoryMockRecorder) Search(ctx, param, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTaskRepository)(nil).Search), ctx, param, q)
}

// SearchByParam mocks base method.
func (m *MockTaskRepository) SearchByParam(ctx context.Context, param *model.TaskSearchParam) ([]*model.Task, *model.PagingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByParam", ctx, param)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(*model.PagingResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchByParam indicates an expected call of SearchByParam.
func (mr *MockTaskRepositoryMockRecorder) SearchByParam(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByParam", reflect.TypeOf((*MockTaskRepository)(nil).SearchByParam), ctx, param)
}

// SearchByParamWithTx mocks base method.
func (m *MockTaskRepository) SearchByParamWithTx(tx *firestore.Transaction, param *model.TaskSearchParam) ([]*model.Task, *model.PagingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByParamWithTx", tx, param)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(*model.PagingResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchByParamWithTx indicates an expected call of SearchByParamWithTx.
func (mr *MockTaskRepositoryMockRecorder) SearchByParamWithTx(tx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByParamWithTx", reflect.TypeOf((*MockTaskRepository)(nil).SearchByParamWithTx), tx, param)
}

// SearchWithTx mocks base method.
func (m *MockTaskRepository) SearchWithTx(tx *firestore.Transaction, param *model.TaskSearchParam, q *firestore.Query) ([]*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchWithTx", tx, param, q)
	ret0, _ := ret[0].([]*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchWithTx indicates an expected call of SearchWithTx.
func (mr *MockTaskRepositoryMockRecorder) SearchWithTx(tx, param, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchWithTx", reflect.TypeOf((*MockTaskRepository)(nil).SearchWithTx), tx, param, q)
}

// StrictUpdate mocks base method.
func (m *MockTaskRepository) StrictUpdate(ctx context.Context, id string, param *model.TaskUpdateParam, opts ...firestore.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StrictUpdate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StrictUpdate indicates an expected call of StrictUpdate.
func (mr *MockTaskRepositoryMockRecorder) StrictUpdate(ctx, id, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrictUpdate", reflect.TypeOf((*MockTaskRepository)(nil).StrictUpdate), varargs...)
}

// StrictUpdateWithTx mocks base method.
func (m *MockTaskRepository) StrictUpdateWithTx(tx *firestore.Transaction, id string, param *model.TaskUpdateParam, opts ...firestore.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{tx, id, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StrictUpdateWithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StrictUpdateWithTx indicates an expected call of StrictUpdateWithTx.
func (mr *MockTaskRepositoryMockRecorder) StrictUpdateWithTx(tx, id, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{tx, id, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrictUpdateWithTx", reflect.TypeOf((*MockTaskRepository)(nil).StrictUpdateWithTx), varargs...)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(ctx context.Context, subject *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), ctx, subject)
}

// UpdateMulti mocks base method.
func (m *MockTaskRepository) UpdateMulti(ctx context.Context, subjects []*model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMulti", ctx, subjects)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMulti indicates an expected call of UpdateMulti.
func (mr *MockTaskRepositoryMockRecorder) UpdateMulti(ctx, subjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulti", reflect.TypeOf((*MockTaskRepository)(nil).UpdateMulti), ctx, subjects)
}

// UpdateMultiWithTx mocks base method.
func (m *MockTaskRepository) UpdateMultiWithTx(ctx context.Context, tx *firestore.Transaction, subjects []*model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMultiWithTx", ctx, tx, subjects)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMultiWithTx indicates an expected call of UpdateMultiWithTx.
func (mr *MockTaskRepositoryMockRecorder) UpdateMultiWithTx(ctx, tx, subjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiWithTx", reflect.TypeOf((*MockTaskRepository)(nil).UpdateMultiWithTx), ctx, tx, subjects)
}

// UpdateWithTx mocks base method.
func (m *MockTaskRepository) UpdateWithTx(ctx context.Context, tx *firestore.Transaction, subject *model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithTx", ctx, tx, subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithTx indicates an expected call of UpdateWithTx.
func (mr *MockTaskRepositoryMockRecorder) UpdateWithTx(ctx, tx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithTx", reflect.TypeOf((*MockTaskRepository)(nil).UpdateWithTx), ctx, tx, subject)
}

// MockTaskRepositoryMiddleware is a mock of TaskRepositoryMiddleware interface.
type MockTaskRepositoryMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMiddlewareMockRecorder
}

// MockTaskRepositoryMiddlewareMockRecorder is the mock recorder for MockTaskRepositoryMiddleware.
type MockTaskRepositoryMiddlewareMockRecorder struct {
	mock *MockTaskRepositoryMiddleware
}

// NewMockTaskRepositoryMiddleware creates a new mock instance.
func NewMockTaskRepositoryMiddleware(ctrl *gomock.Controller) *MockTaskRepositoryMiddleware {
	mock := &MockTaskRepositoryMiddleware{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepositoryMiddleware) EXPECT() *MockTaskRepositoryMiddlewareMockRecorder {
	return m.recorder
}

// BeforeDelete mocks base method.
func (m *MockTaskRepositoryMiddleware) BeforeDelete(ctx context.Context, subject *model.Task, opts ...model.DeleteOption) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subject}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeforeDelete", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeDelete indicates an expected call of BeforeDelete.
func (mr *MockTaskRepositoryMiddlewareMockRecorder) BeforeDelete(ctx, subject any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subject}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDelete", reflect.TypeOf((*MockTaskRepositoryMiddleware)(nil).BeforeDelete), varargs...)
}

// BeforeDeleteByIdentity mocks base method.
func (m *MockTaskRepositoryMiddleware) BeforeDeleteByIdentity(ctx context.Context, identities []string, opts ...model.DeleteOption) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identities}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeforeDeleteByIdentity", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeDeleteByIdentity indicates an expected call of BeforeDeleteByIdentity.
func (mr *MockTaskRepositoryMiddlewareMockRecorder) BeforeDeleteByIdentity(ctx, identities any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identities}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDeleteByIdentity", reflect.TypeOf((*MockTaskRepositoryMiddleware)(nil).BeforeDeleteByIdentity), varargs...)
}

// BeforeInsert mocks base method.
func (m *MockTaskRepositoryMiddleware) BeforeInsert(ctx context.Context, subject *model.Task) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeInsert", ctx, subject)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeInsert indicates an expected call of BeforeInsert.
func (mr *MockTaskRepositoryMiddlewareMockRecorder) BeforeInsert(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeInsert", reflect.TypeOf((*MockTaskRepositoryMiddleware)(nil).BeforeInsert), ctx, subject)
}

// BeforeUpdate mocks base method.
func (m *MockTaskRepositoryMiddleware) BeforeUpdate(ctx context.Context, old, subject *model.Task) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeUpdate", ctx, old, subject)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeUpdate indicates an expected call of BeforeUpdate.
func (mr *MockTaskRepositoryMiddlewareMockRecorder) BeforeUpdate(ctx, old, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeUpdate", reflect.TypeOf((*MockTaskRepositoryMiddleware)(nil).BeforeUpdate), ctx, old, subject)
}
